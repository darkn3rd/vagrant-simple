#######
# install()
#
# description: installs package on ubuntu 14
# usage: install $PACKAGE_NAME
##########################################
install() {
  PACKAGE=$1
  if ! dpkg -l ${PACKAGE} > /dev/null; then
    apt-get -y install ${PACKAGE}
  fi
}

#######
# parse_yaml()
#
# description: flattens YAML file
# usage: parse_yaml $CONFIGFILE
##########################################
parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

#######
# parse_ini()
#
# description: flattens INI file w/ sep of '.'
# usage: parse_ini < $CONFIGFILE
##########################################
parse_ini() {
  awk '!/^$/ {
    if ((start = index($0, "[")) != 0) {
        size = index(substr($0, start + 1), "]")
        section = substr($0, start+1, size-1)
    } else {
      print section "." $0
    }
  }'
}

#######
# get_hostnames_by_csv()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_csv $CSVFILE
# notes:
#  * destructively strips header
#  * doesn't handle quoted columns with comma
##########################################
get_hostnames_by_csv () {
   echo $(sed '1d' < ${1} | cut -d, -f1)
}

#######
# get_hostnames_by_ini()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_ini $INIFILE
##########################################
get_hostnames_by_ini () {
  HOSTS_DATA=$(parse_ini < ${1} | grep -F hosts | sed 's/^hosts\.//' | tr -s '="' ' ')
  echo "${HOSTS_DATA}" | cut -d ' ' -f1
}

#######
# get_hostnames_by_hosts()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_hosts $HOSTSFILE
##########################################
get_hostnames_by_hosts () {
  echo $(tr -s ' ' < "${1}" | cut -d ' ' -f2)
}

#######
# get_hostnames_by_json()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_json $JSONFILE
##########################################
get_hostnames_by_json () {
  ##### Install & Verify Required Tool
  install jq
  command -v jq || \
    { echo "ERROR: jq not found. Install jq or ensure it is in your path";
      return 2; }

  ##### Output Results
  HOSTS_DATA=$(jq -c '.hosts' < ${1} | tr -d '{}"' | tr ':,' ' \n')
  echo "${HOSTS_DATA}" | cut -d ' ' -f1
}

#######
# get_hostnames_by_sql()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_sql $SQLFILE
##########################################
get_hostnames_by_sql () {
  ##### Install & Verify Required Tool
  install sqlite3
  command -v sqlite3 || \
    { echo "ERROR: sqlite3 not found. Install sqlite3 or ensure it is in your path";
      return 2; }

  ##### Fetch Hosts
  CONFIGDB="$(echo ${1} | cut -d. -f1).db"
  [ -e ${CONFIGDB} ] || sqlite3 ${CONFIGDB} ".read ${1}"  # build db if not exist
  QUERY=".mode column\n SELECT hostname, ipaddr FROM hosts;"

  ##### Output Results
  HOSTS_DATA=$(printf ${QUERY} | sqlite3 ${CONFIGDB} | tr -s ' ')
  echo "${HOSTS_DATA}" | cut -d ' ' -f1
}

#######
# get_hostnames_by_xml()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_xml $YAMLFILE
##########################################
get_hostnames_by_xml () {
  ##### Install & Verify Required Tool
  install xml2
  command -v xml2 || \
    { echo "ERROR: xml2 not found. Install xml2 or ensure it is in your path";
      return 2; }

  ##### Output Results
  HOSTS_DATA=$(xml2 < ${1} | grep -F hosts | tr -s '/=' ' ' | cut -d' ' -f4,5)
  echo "${HOSTS_DATA}" | cut -d ' ' -f1
}

#######
# get_hostnames_by_yaml()
#
# description: prints list of hosts from given file
# usage: get_hostnames_by_yaml $YAMLFILE
##########################################
get_hostnames_by_yaml () {
  HOSTS_DATA=$(parse_yaml ${1} | grep -F hosts | sed 's/_hosts_//' | tr -s '="' ' ')
  echo "${HOSTS_DATA}" | cut -d ' ' -f1
}

#######
# get_hostnames()
#
# description: prints list of hosts from given file
# usage: get_hostnames $CONFIGFILE
##########################################
get_hostnames () {
  [ $# -le 1 ] || \
    { echo "ERROR: Must supply configfile as parameter"; return 1; }

  CONFIGFILE=$1
  [ -e ${CONFIGFILE} ] || \
    { echo "ERROR: ${CONFIGFILE} doesn't exist."; return 1; }

  # Call Appropriate Function For Configuration File Type
  CONFIG_TYPE=$(echo $1 | cut -d. -f2)
  case "${CONFIG_TYPE}" in
    csv)      echo $(get_hostnames_by_csv   ${CONFIGFILE}) ;;
    ini)      echo $(get_hostnames_by_ini   ${CONFIGFILE}) ;;
    hosts)    echo $(get_hostnames_by_hosts ${CONFIGFILE}) ;;
    json)     echo $(get_hostnames_by_json  ${CONFIGFILE}) ;;
    sql)      echo $(get_hostnames_by_sql   ${CONFIGFILE}) ;;
    xml)      echo $(get_hostnames_by_xml   ${CONFIGFILE}) ;;
    yaml|yml) echo $(get_hostnames_by_yaml  ${CONFIGFILE}) ;;
  esac
}

#######
# get_ipaddress()
#
# description: prints ipaddress given configfile path and hostname
# usage: get_ipaddress $CONFIGFILE
##########################################
get_ipaddress () {
  # test for two parameters
  echo $(tr -s ' ' < "${1}" | grep -F "${2}" | cut -d ' ' -f1)
}

#######
# config_ssh()
#
# description: configures ssh_config given configuration file path
# usage: config_ssh $CONFIGFILE
##########################################
config_ssh () {
  [ $# -le 1 ] || \
    { echo "ERROR: Must supply configfile as parameter"; return 1; }

  CONFIGFILE=$1
  SSH_CONFIG=${2:-"/etc/ssh/ssh_config"}
  HOSTS=$(get_hostnames ${CONFIGFILE})

  ##### Local Variables
  cp /dev/null ${SSH_CONFIG}

  for HOST in ${HOSTS}; do
    # Reference Identity File
    # Prerequisite:
    #   * local directory on host　must be mounted on guest system as
    #　  　/vagrant (default behavior)
    #   * guest-edtitions drivers must be installed on guest
    # Note: Refer to default Vagrant beahavior, as private_key created at time of
    #       machine creation
    IDENTITYFILE="/vagrant/.vagrant/machines/${HOST}/virtualbox/private_key"

    if ! grep -qF "Host ${HOST}" ${SSH_CONFIG}; then
      ### CREATE GLOBAL SSH CONFIG
      cat <<- CONFIG_EOF >> ${SSH_CONFIG}
  Host ${HOST}
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    IdentitiesOnly yes
    User vagrant
    IdentityFile ${IDENTITYFILE}
    PasswordAuthentication no
CONFIG_EOF
    fi
  done

}

#######
# config_hosts()
#
# description: configures hosts given configuration file path
# usage: config_hosts $CONFIGFILE
##########################################
config_hosts () {
  [ $# -le 1 ] || \
    { echo "ERROR: Must supply configfile as parameter"; return 1; }

  CONFIGFILE=$1
  HOSTS_FILE=${2:-"/etc/hosts"}
  HOSTS=$(get_hostnames ${CONFIGFILE})

  for HOST in ${HOSTS}; do
    if [ "$(hostname)" = "${HOST}" ]; then continue; fi
    ### APPEND TO HOSTS IF EXACT ENTRY NOT EXIST
    IPADDRESS=$(get_ipaddress ${CONFIGFILE} ${HOST})
    grep -Fq "${IPADDRESS} ${HOST}" ${HOSTS_FILE} || echo "${IPADDRESS} ${HOST}" >> ${HOSTS_FILE}
  done
}
